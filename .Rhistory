}
return(0)
}
de_fc_ser <- function(x){
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
de_fc <- function(x){
if(abs(as.numeric(x))> 0.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
print(x)
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
de_fc <- function(x){
if(abs(as.numeric(x))> 0.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
print(x[1,])
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
de_fc <- function(x){
if(abs(as.numeric(x))> 0.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
print(x[1])
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
View(dlfc)
de_fc <- function(x){
if(abs(as.numeric(x))> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
print(x[1])
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
de_fc <- function(x){
if(abs(as.numeric(x))> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x[1],de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
de_fc <- function(x){
if(abs(x)> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x[1],de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
de_fc <- function(x){
if(abs(x[1])> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
de_fc <- function(x){
if(abs(x[1])> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x[1],de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
de_fc <- function(x){
if(abs(as.numeric(x[1]))> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x[1],de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
if(abs(as.numeric(x))> 1.5){
return(1)
}
de_fc <- function(x){
if(abs(as.numeric(x))> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x[1],de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
View(dlfc)
de_fc <- function(x){
if(abs(as.numeric(x))> 1.5){
return(1)
}
return(0)
}
de_fc_ser <- function(x){
sapply(x,de_fc)
}
dlfc<-data.frame(lapply(df[,1:24], FUN = de_fc_ser))
row.names(dlfc)<-row.names(df)
View(dlfc)
dlfc<-data.frame(lapply(df[,1:24], 0,FUN = de_fc_ser))
dlfc<-data.frame(lapply(df, 0,FUN = de_fc_ser))
View(df)
View(df)
?goseq
sapply(head(df), print)
sapply(t(df), function (x) names[abs(x) > 0.5], MARGIN = 2)
sapply(t(df), function (x) names[abs(x) > 0.5], MARGIN = 1)
sapply(t(df), function (x) names[abs(x) > 0.5])
sapply(t(df), function (x) names[abs(as.numeric(x)) > 0.5])
names = rownames(df)
sapply(t(df), function (x) names[abs(as.numeric(x)) > 0.5])
sapply(t(df), function (x) names[abs(as.numeric(x)) > 0.5], USE.NAMES = T)
sapply(t(df), function (x) names[abs(as.numeric(as.factor(x))) > 0.5], USE.NAMES = T)
apply(df, function (x) names[abs(as.numeric(as.factor(x))) > 0.5], USE.NAMES = T)
apply(df,2, function (x) names[abs(as.numeric(as.factor(x))) > 0.5], USE.NAMES = T)
apply(df,2, function (x) names[abs(as.numeric(as.factor(x))) > 0.5])
remove(names)
apply(df,2, function (x) names(x)[abs(x) > 0.5])
apply(df,2, function (x) {names(x)[abs(x) > 0.5]})
head(df)
df[abs(df)<0.5]=0
sapply(df,is.numeric)
df=as.matrix(df)
df[abs(df)<0.5]=0
apply(df,2, function (x) {names(x)[abs(x) > 0.5]})
library(DESeq2)
library("BiocParallel")
register(MulticoreParam(3))
require(reshape2)
library(glm)
library(fifer)
count_file_path <- "~/Documents/Weizmann/RNAseq/Probiotics/RNAseq/with_without_prob_no_abx/ileum_raw_count.csv"
metadata_path<-"~/Documents/Weizmann/RNAseq/Probiotics/RNAseq/with_without_prob_no_abx/ileum_metadata.csv"
############################################################################################
## READ THE DATA
#metadata
meta <- read.csv(metadata_path,header = F,sep = ",",check.names=FALSE)
condition <- c(t(meta[3,-1]))
#count data
countData  <- read.csv(count_file_path,sep = ",",check.names=FALSE)
row.names(countData)<-countData[,1]
countData<-countData[,-1]
countData<-countData[log(rowSums(countData), 2) > 3,]
ExpDesign <- data.frame(row.names=colnames(countData), condition = condition)
dds = DESeqDataSetFromMatrix(countData, colData=ExpDesign, design= ~ condition)
dds <- DESeq(dds)
gsd <- apply(countData,1, sd)
COV<-  gsd/rowMeans(countData)
rk_mean<-rowMeans(apply(countData,2,FUN = base::rank))
smoothScatter(COV~log(rk_mean), col=rgb(0,0,0,.3), cex=.3, ylim=c(0,5))
smoothScatter(COV~log(rk_mean), col=rgb(0,0,0,.3), cex=.3)
gsd_2 <- apply(sizeFactors(dds) * countData,1, sd)
COV_2<-gsd_2/rowMeans(sizeFactors(dds) * countData)
rk_mean_2<-rowMeans(apply((sizeFactors(dds) * countData),2,FUN = base::rank))
smoothScatter(log(COV_2)~log(rk_mean_2), col=rgb(0,0,0,.3), cex=.3)
data_exprs<-sizeFactors(dds) * countData
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((mean_expression),(var_genes), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
View(corrected_variance)
View(data.frame(corrected_variance))
hist(corrected_variance)
hist(corrected_variance, breaks = 100)
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothScatter((rk_mean_2),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
names(rk_mean_2)
corrected_variance=c()
for (k in names(rk_mean_2)) {
u=abs(smoothing_relation$x-(rk_mean_2[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,COV_2[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
d<-density(rowSums(countData))
plot(x=d$x, y=log(d$y))
plot(d)
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
##########
# Piere ORIGINAL ####?
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((mean_expression),(var_genes), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
####
# Piere ORIGINAL ####
data_exprs<-  countData / colSums(countData)
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((mean_expression),(var_genes), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
####
View(data_exprs)
# Piere ORIGINAL ####
data_exprs<-  (countData / colSums(countData))*10^7
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((mean_expression),(var_genes), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
####
data_exprs<-sizeFactors(dds) * countData
View(var_genes)
View(data.frame(var_genes))
hist(var_genes, breaks = 100)
hist(log(var_genes), breaks = 100)
hist(corrected_variance, breaks = 100)
hist(smoothing_relation$y)
sum(smoothing_relation$y< 0)
u
smoothing_relation$y[smoothing_relation$y < 0]
plot(y~x, smoothing_relation)
which(smoothing_relation$y < 0)
smoothing_relation$x[1]
plot(y~x, smoothing_relation, xlim=c(20,22))
smoothing_relation$x[smoothing_relation$y < 0]
plot(y~x, smoothing_relation, xlim=c(20,22), ylim=c(-10^8,0))
smoothing_relation$y
smoothing_relation$x = smoothing_relation$x[!filter]
smoothing_relation$y = smoothing_relation$y[!filter]
˜filter
filter = which(smoothing_relation$y < 0)
smoothing_relation$x = smoothing_relation$x[-filter]
smoothing_relation$y = smoothing_relation$y[-filter]
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
# Adapted (Piere) ####
data_exprs<-sizeFactors(dds) * countData
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(rk_mean_2)) {
u=abs(smoothing_relation$x-(rk_mean_2[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,COV_2[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance*(5/max(corrected_variance)))
corrected_variance[corrected_variance < 1]
smoothScatter(corrected_variance)
# Piere ORIGINAL ####
data_exprs<-  (countData / colSums(countData))*10^7
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((mean_expression),(var_genes),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((mean_expression),(var_genes), span = 2/3,
degree = 3,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
filter = which(smoothing_relation$y < 0)
smoothing_relation$x = smoothing_relation$x[-filter]
smoothing_relation$y = smoothing_relation$y[-filter]
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(mean_expression)) {
u=abs(smoothing_relation$x-(mean_expression[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,var_genes[k]/((corrected_y)))
}
# Adapted (Piere) ####
data_exprs<-sizeFactors(dds) * countData
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 2,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(rk_mean_2)) {
u=abs(smoothing_relation$x-(rk_mean_2[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,COV_2[k]/((corrected_y)))
}
# Adapted (Piere) ####
data_exprs<-sizeFactors(dds) * countData
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 3,
family = c("symmetric", "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(rk_mean_2)) {
u=abs(smoothing_relation$x-(rk_mean_2[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,COV_2[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(corrected_variance)
smoothScatter(log(corrected_variance))
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 3,
family = c( "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 3,
family = c( "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
# Adapted (Piere) ####
data_exprs<-sizeFactors(dds) * countData
var_genes=apply(data_exprs,MARGIN = 1,FUN = function(x) {var(x)})
mean_expression=apply(data_exprs,MARGIN = 1,FUN = function(x) {mean(x)})
smoothScatter((rk_mean_2),(COV_2),pch=16,cex=0.6,xlab="Mean
expression ",
ylab="Variance",main="Selcection of variable genes")
smoothing_relation=loess.smooth((rk_mean_2),(COV_2), span = 2/3,
degree = 2,
family = c( "gaussian"),
evaluation = 1000)
lines(smoothing_relation,col="red",lwd=2,lty=3)
#Wich genes are outliers ?
corrected_variance=c()
for (k in names(rk_mean_2)) {
u=abs(smoothing_relation$x-(rk_mean_2[k]))
corrected_x=smoothing_relation$x[which.min(u)]
corrected_y=smoothing_relation$y[which.min(u)]
corrected_variance=c(corrected_variance,COV_2[k]/((corrected_y)))
}
names(corrected_variance)=names(mean_expression)
smoothScatter(log(corrected_variance))
which(log(corrected_variance)<-0.5)
which(log(corrected_variance)< = 0.5)
which(log(corrected_variance) < -0.5)
names(which(log(corrected_variance) < -0.5))
writeLines(names(which(log(corrected_variance) < -0.5)), con=file("./outliers.list"))
plot(log(corrected_variance))
writeLines(names(which(log(corrected_variance) < 0)), con=file("./outliers.list"))
writeLines(names(which(log(corrected_variance) < 0)), con=file("./outliers.list"))
setwd("/Users/uriamor/Documents/TAU/graphics/ex2")
a <-read.table("./xyz.csv", check.names = F, stringsAsFactors = F)
a <-read.table("./xyz.csv", check.names = F, stringsAsFactors = F, sep=",")
a
a[1]
View(a)
a <-read.table("./xyz.csv", check.names = F, stringsAsFactors = F, sep=",")
install.packages("plotly")
library(plotly)
plot_ly(x=a[1],y=a[2],z=a[3])
plot_ly(x=a[1],y=a[2],z=a[3])%>% add_surface()
a[3]
matrix(a[3])
plot_ly(x=a[1],y=a[2],z=matrix(a[3]))%>% add_surface()
plot_ly(x=a[1],y=a[2],z=as.matrix(a[3]))%>% add_surface()
plot_ly(x=as.matrix(a[1]),y=a[2],z=as.matrix(a[3]))%>% add_surface()
p<-plot_ly(x=as.matrix(a[1]),y=a[2],z=as.matrix(a[3]))%>% add_surface()
p
p$x
p$y
p$z
p<-plot_ly(x=as.matrix(a[1]),y=as.matrix(a[2]),z=as.matrix(a[3]))%>% add_surface()
p<-plot_ly(x=as.matrix(a[1]),y=as.matrix(a[2]),z=as.matrix(a[3]))
p<-plot_ly(x=as.matrix(a[1]),y=as.matrix(a[2]),z=as.matrix(a[3]))
p<-plot_ly(z=as.matrix(a))
p<-plot_ly(as.matrix(a))
p<-plot_ly(a)
plot_ly(a)
loess(a)
plot(a)
plot(x=a[1], y=a[2])
a <-read.table("./xyz.csv", check.names = F, stringsAsFactors = F, sep=",")
plot(x=a[1], y=a[2])
plot(x=as.matrix(a[1]), y=as.matrix(a[2]))
